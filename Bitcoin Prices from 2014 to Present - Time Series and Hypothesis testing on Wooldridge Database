# Time-Series Analysis of Bitcoin Prices using ARIMA and Forecasting in R 

install.packages('plyr')
install.packages('tseries')
library(plyr)
library(tseries)

# The data set files have been downloaded and the quaestion has been answered as follows:
# Merging all data sets together by unique id DATE we get the following:
# Reading the files and data sets we have

merged_data <- merge(fread('Bitcoin data.csv'), fread('btc_price_data.csv'), all = FALSE)
summary(merged_data)

# Removing null values we then get
merged_data<-na.omit(merged_data)

# Plotting the data time series in R
ts.plot(merged_data)


# naive regression on spurious correlation with 
modelbit <- lm(Price ~ SP500 + GOLDAMGBD228NLBM + DEXUSEU + DCOILWTICO,data=merged_data)
summary(modelbit)

# a normal ols regression gives the following relation for the bitcoin price with the other variables and parameters = -25400 + 10.29*sp500 - 1.354*gold - 21.07.18*texas_oil + 29560*usd_eu_conv
# This basically gives negative predictions along with horrible predictions for recent btc prices, which is also clearly depicted from the model above

# Performing the kpss test on the bitcoin data, we get the dollowing to check the stationarity of the variables
kpss.test(merged_data$Price,null="Level")
kpss.test(merged_data$Price,null="Trend")
kpss.test(diff(merged_data$Price),null="Level")
kpss.test(diff(merged_data$Price),null="Trend")

# KPSS test on gold data series
kpss.test(merged_data$GOLDAMGBD228NLBM,null="Level")
kpss.test(merged_data$GOLDAMGBD228NLBM,null="Trend")
kpss.test(diff(merged_data$GOLDAMGBD228NLBM),null="Level")
kpss.test(diff(merged_data$GOLDAMGBD228NLBM),null="Trend")

# KPSS test on SP500 data series
kpss.test(merged_data$SP500,null="Level")
kpss.test(merged_data$SP500,null="Trend")
kpss.test(diff(merged_data$SP500),null="Level")
kpss.test(diff(merged_data$SP500),null="Trend")

# KPSS test on DCOIL data series
kpss.test(merged_data$DCOILWTICO,null="Level")
kpss.test(merged_data$DCOILWTICO,null="Trend")
kpss.test(diff(merged_data$DCOILWTICO),null="Level")
kpss.test(diff(merged_data$DCOILWTICO),null="Trend")

# KPSS test on DEXUSEU data series
kpss.test(merged_data$DEXUSEU,null="Level")
kpss.test(merged_data$DEXUSEU,null="Trend")
kpss.test(diff(merged_data$DEXUSEU),null="Level")
kpss.test(diff(merged_data$DEXUSEU),null="Trend")

# We can conclude that each of the following series are level-stationary after performing the kpss test on each of them respectively, after taking the first differences. Similarly we can also check for the trend-stationary as well

# Taking difference and performing regression on the differences of every series we get the following;
modeldiff <- lm(diff(Price) ~ diff(SP500) + diff(GOLDAMGBD228NLBM) + diff(DEXUSEU) + diff(DCOILWTICO),data=merged_data)
summary(modeldiff)

# We can conclude from the above model that all variables are statistically significant

# Removing all data just before bitcoin starts to spike, we can plot the data as follows

merged_data1 <- merged_data[which(merged_data$Date >= '2017-01-01'),]
ts.plot(merged_data1)
ts.plot(merged_data1$Price)
ts.plot(merged_data1$SP500)
ts.plot(merged_data1$DCOILWTICO)
ts.plot(merged_data1$DEXUSEU)
ts.plot(merged_data1$GOLDAMGBD228NLBM)

# Plotting the ACF and PACF of the series we get the following plots

acf(diff(merged_data1$Price))
pacf(diff(merged_data1$Price))

# Taking log of the difference of merged bitcoin data series, we get the following
acf(diff(log(merged_data1$Price)))
pacf(diff(log(merged_data1$Price)))

# The ACF and PACF plots are as illustrated as above

# The best ARIMA model that can be fit to the time series bitcoin data model can be illustrated as follows;
# From the previous models we have max value is 10
maxa <- 10
outp <- matrix(0L,(maxa+1)^2,3)
cp <- merged_data1 %>% select(Price) %>% log
ndx <- 1
for(i in 0:maxa){
  print(paste(as.character(round(i*(maxa+1)/(maxa+1)^2*100,digits=4)),'%...',sep=''))
  for(j in 0:maxa) {
    tryCatch({aic<-cp%>%arima(c(i,1,j))%>%AIC},error=function(err){aic<-9999.99})
    outp[ndx,1:3] <- c(i,j,aic)
    ndx <- ndx + 1
  }
} 
rm(cp,ndx) 
outp <- data.table(outp)
colnames(outp) <- c('p','q','AIC')
outp[order(AIC)]

# Forecast for the next 30 days of the bitcoin price can be done as follows;

install.packages('forecast')
library(forecast)
model18 <- arima(log(merged_data1$Price),c(7,1,5))
steps <- 30
future <- forecast(model18,steps)
plot(future)

# The periodogram for the data set is as follows
install.packages('TSA')
library(TSA)
periodogram(log(merged_data1$Price))
periodogram(diff(log(merged_data1$Price)))

# We can see that the periodogram has a lot of spikes, which means that data might be seasonal but cannot be seen clearly in the figure

# Regression on the dummy variables during the week can be done as follows;

merged_data1$Date <- as.Date(merged_data1$Date)
merged_data1$dow <- weekdays(merged_data1$Date)
mergedbit <- merged_data1[c(2,7)]
mergedbit$dummy <- 1

mergedbit <- reshape(mergedbit, idvar = "Price", timevar = "dow", direction = "wide")
colnames(mergedbit)[2:6] <- c('tu','we','th','fr','mo')
modelbitregress <- lm(data = mergedbit, diff(log(Price)) ~ mo + tu + we + th + fr)
summary(modelbitregress)
periodogram(modelbitregress$residuals)

# The VAR model that captures relationships between our 5 different variables is as follows;
install.packages('vars')
library(vars)
ft <- function(x){
  n <- nrow(x)
  return(x[2:n,]-x[1:n-1,])
}
bitc_var <- merged_data1 %>% dplyr::select(Price, SP500,GOLDAMGBD228NLBM, DCOILWTICO, DEXUSEU ) %>% log %>% ft
VAR(bitc_var,p=1,type="both") %>% AIC
VAR(bitc_var,p=2,type="both") %>% AIC
VAR(bitc_var,p=3,type="both") %>% AIC
modelfin <- VAR(bitc_var,p=1,type="both")
summary(modelfin)

# Forecasting the nest 30 days using the VAR model we get

predict (modelfin, steps=30)































